name: Build and Test Full Stack Application

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "main" ]

jobs:
  lint-dockerfiles:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/src/main/java/com/sqs_maier/docker/Dockerfile.jvm

      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile

  Build-Frontend-and-Backend-and-push-imges:
    runs-on: ubuntu-latest
    needs: lint-dockerfiles

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build backend with Maven
        run: mvn -B clean test package --file backend/pom.xml

      - name: Run SonarCloud Analysis for Backend
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=sqsprojekt_backend -Dsonar.organization=sqsprojekt -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Build frontend with npm
        working-directory: frontend
        run: |
          npm install
          npm run build

      - name: Run SonarCloud Analysis for Frontend
        working-directory: frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: npx sonar-scanner -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.javascript.lcov.reportPaths=/frontend/coverage/lcov.info

      - name: Prepare lowercase variables
        run: echo "LOWER_REPO_NAME=${{ github.repository | lower }}" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/src/main/java/com/sqs_maier/docker/Dockerfile.jvm
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_backend:latest

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ env.LOWER_REPO_NAME }}/sqs_frontend:latest

  Artillery-Test:
    runs-on: ubuntu-latest
    needs: Build-Frontend-and-Backend-and-push-imges

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Running Containers
        run: docker ps

      - name: Start Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      - name: Wait for services to start
        run: sleep 15

      - name: Update Artillery Script with Host Port
        run: sed -i "s/\${host_port}/8080/g" artillery-tests/artillery.yml

      - name: Run Artillery Tests
        if: success()
        run: |
          npm install -g artillery
          artillery run artillery-tests/artillery.yml

  End-To-End-Test-Frontend-Test:
    runs-on: ubuntu-latest
    needs: Build-Frontend-and-Backend-and-push-imges

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Show Running Containers
        run: docker ps

      - name: Start Docker Compose
        run: docker-compose -f ./docker-compose.yml up -d

      - name: Wait for services to start
        run: sleep 15

      - name: Build playwright with npm
        working-directory: playwright
        run: |
          npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright Frontendtests
        run: |
          cd playwright
          npx playwright test --config playwright.config.js
